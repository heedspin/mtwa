<% if @disabled %>
<h2>HIT Preview</h2>
<p>Remember To "Accept HIT" to proceed.</p>
<% end %>

<div class="mt-instructions">
	<h3>Instructions</h3>
	<p>
		Enter the text and images from 
		<% unless @survey.subpage.only? %>
		the <strong><%= @survey.subpage.name %> Product</strong> on
		<% end %>
		<%= link_to 'This PDF', "#{@survey.asset_path}?#{rails_asset_id(@survey.asset_path)}" %>
	</p>

	<% if @survey.subpage.only? %>
	<p>
		This PDF has describes a single product.  Please enter the text below and upload a screenshot of the image.
	</p>
	<% else %>
	<p>
		This PDF describes two products.  Please enter the text below and upload a screenshot of the image for the <strong><%= @survey.subpage.name %></strong> product on the page.
	</p>
	<% end %>
</div>

<%= semantic_form_for @survey, :url => mt_url do |f| %>
<input type="hidden" name="assignmentId" value="<%= @assignment_id %>" />
<%= f.inputs do %>
	<%= f.input :title, :input_html => {:disabled => @disabled}, :label => 'Product Title' %>
	
	<li>
		<label>Upload Product Screenshot</label>
		<div class="image_preview"><span></span>
			<%= image_tag 'update.png', :title => 'Please upload an image', :id => 'image_preview', :width => 24, :height => 24 %>
		</div>
		<div id="wrapper">
			<div id="overall"><span class="progress"><span class="amount"></span></span><span id="status"></span></div>
			<%=raw s3_swf_upload_tag(
				:signaturePath => new_s3_upload_path(:format => :xml),
				:fileTypes => '*.jpg;*.gif;*.png;',
			  :fileTypeDescs => 'Image files.',
				:selectMultipleFiles => false,
				:keyPrefix => "mt_pdf_survey/#{@upload_prefix}_",
				:onFileNotInQueue => "alert('File not found in the queue');",
				:onFileSizeLimitReached => "alert('That file is too big');",
				:onQueueChange => "queueChangeHandler(queue);",
				:onQueueSizeLimitReached => "alert('There are too many files in the queue');",
				:onQueueEmpty => "alert('You gotta have at least one file in there');",
				:onQueueClear => "queueClearHandler(queue);",
				:onUploadingStart => "uploadingStartHandler();",
				:onUploadingFinish => "uploadingFinishHandler();",
				:onSignatureIOError => "alert('There was a file upload io error');",
				:onSignatureXMLError => "alert('There was a file upload xml error');",
				:onSignatureSecurityError => "alert('There was a security error');",
				:onUploadError => "alert('There was an upload error');",
				:onUploadIOError => "alert('There was an upload IO error');",
				:onUploadSecurityError => "alert('There was an error');",
				:onUploadProgress => "progressHandler(progress_event);",
				:onUploadComplete => "uploadCompleteHandler(upload_options,event);",
				:onFileAdd => 'fileAddHandler();'
			) %>
		</div>	
	</li>
	
	<%= f.input :material, :input_html => {:disabled => @disabled, :class => "wymeditor skinny"}  %>
	<%= f.input :finish, :input_html => {:disabled => @disabled, :class => "wymeditor skinny"}  %>
	<%= f.input :notes, :input_html => {:disabled => @disabled, :class => "wymeditor skinny"}  %>

	<%= f.input "table1_title", :input_html => {:disabled => @disabled}, :label => 'First Table Title' %>
	<li>
		<label>First Table Data</label>
		<%= render 'table_input', :f => f, :object => :mt_pdf_survey, :field => :table1, :columns => 5, :rows => 10 %>
	</li>
	<%= f.input "table2_title", :input_html => {:disabled => @disabled}, :label => 'Second Table Title' %>
	<li>
		<label>Second Table Data</label>
		<%= render 'table_input', :f => f, :object => :mt_pdf_survey, :field => :table2, :columns => 5, :rows => 10 %>
	</li>
<% end %>

<% unless @survey.subpage.only? %>
<p>
	Double Check that you entered the <strong><%= @survey.subpage.name %> Product On Page</strong>
</p>
<% end %>
<%= f.buttons do %>
  <%= f.commit_button 'Save', :button_html => {:disabled => @disabled} %>
<% end %>
<% end %>

<script type="text/javascript">
var queueBytesLoaded = 0;
var queueBytesTotal = 0;
var myQueue = null;

var queueChangeHandler = function(queue){
	// alert('Uploading Started');
	myQueue = queue;
	// console.log("COLLECTION CHANGE!");
	var list = document.getElementById('file_todo_list');
	// Clear out the old
	while (list.hasChildNodes()){list.removeChild(list.firstChild);}
	// Add the new
	for (i=0;i<queue.files.length;i++)
	{
		addFileToTodoList(queue.files[i].name, queue.files[i].size, i);
	}
};

var uploadingStartHandler = function(){
	queueBytesTotal = 0;
	queueBytesLoaded = 0;
	for (i=0;i<myQueue.files.length;i++)
	{
		queueBytesTotal += parseInt(myQueue.files[i].size);
	}
	document.getElementById('queue_size').innerHTML = readableBytes(queueBytesTotal);
};

var uploadingFinishHandler = function(){
	document.getElementById('overall').firstChild.style.width = '100%';
	document.getElementById('overall').firstChild.firstChild.innerHTML = '100%';
  // alert('All files have been successfully uploaded');
};

var queueClearHandler = function(queue){
	document.getElementById('overall').firstChild.style.display = 'none';
	document.getElementById('overall').firstChild.style.width = '0%';
	document.getElementById('overall').firstChild.firstChild.innerHTML = '0%';
	var list = document.getElementById('file_done_list');
	while (list.hasChildNodes()){list.removeChild(list.firstChild);}
};

var addFileToDoneList = function(file_name, file_size){
	var list = document.getElementById('file_done_list');
	var li = document.createElement("li");
	li.innerHTML = 
		'<span class="progress"><span class="amount">100%</span></span>'+
		'<span class="file_name">'+file_name+'</span>'+
		'<span class="file_size">'+readableBytes(file_size)+'</span>';
	list.appendChild(li);
};

var addFileToTodoList = function(file_name, file_size, index){
	var list = document.getElementById('file_todo_list');
	var li = document.createElement("li");
	li.innerHTML = 
		'<span class="progress"><span class="amount">0%</span></span>'+
		'<span class="file_name">'+file_name+'</span>'+
		'<span class="file_size">'+readableBytes(file_size)+'</span>'+
		'<span class="delete" onclick="javascript:s3_swf_1_object.removeFileFromQueue('+index+');">Delete</span>';
	list.appendChild(li);
};

var progressHandler = function(progress_event){
	var overall_percentage = Math.floor(((queueBytesLoaded+parseInt(progress_event.bytesLoaded))/queueBytesTotal)*100)+'%';
	document.getElementById('overall').firstChild.style.display = 'block';
	document.getElementById('overall').firstChild.style.width = overall_percentage;
	document.getElementById('overall').firstChild.firstChild.innerHTML = overall_percentage;
};

var fileAddHandler = function(){
	document.getElementById('overall').firstChild.style.width = "0%";
	document.getElementById('overall').firstChild.firstChild.innerHTML = "0%";
	$('div#overall').show();
	s3_swf_1_object.startUploading();
}

var uploadCompleteHandler = function(upload_options,event){
	$.ajax({
     url: '<%= s3_uploads_path(:format => :js)%>',
     global: false,
     type: 'POST',
     data: ({
			'authenticity_token' : '<%= form_authenticity_token %>',
			's3_upload' : {
				'file_file_name' : "<%= @upload_prefix %>_" + upload_options.FileName,
				'file_file_size' : upload_options.FileSize,
				'file_content_type' : upload_options.ContentType,
				'assignment_id' : '<%= @assignment_id %>',
				'mt_hit_id' : '<%= @mt_hit.try(:id) %>',
				'survey_type' : '<%= @survey.class.name %>'
		  }
		}),
		dataType: 'json',
		success: function(data, textStatus, jqXHR){
			$('#image_preview').attr("src", data.url).attr("width","100").attr("height","100");
    }
  })
	$('div#overall').hide();
};

var readableBytes = function(bytes) {
	var s = ['bytes', 'kb', 'MB', 'GB', 'TB', 'PB'];
	var e = Math.floor(Math.log(bytes)/Math.log(1024));
	return (bytes/Math.pow(1024, Math.floor(e))).toFixed(2)+" "+s[e];
}
</script>